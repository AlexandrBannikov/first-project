Если ну вдруг все сломалось что может быть очень часто, можно все откатить с помощью некоторых команд...

1.Допустим вы добавили файл с помощью git add, но потом передумали его включать в git. Убрать этот файл из standing поможет
  команда git restore --staged <file> (англ.restore - восстановить), в выводе команды git status есть подсказка, use 
  "git restore --staged <file>..." это работает конкретно для файла.
  Для работы с папкой есть команда git restore --staged . она сбросит все текущую папку (.)
  Ранее использовалась команда git reset HEAD но reset перегруженная и она выполняет слишком много разных действий, 
  поэтому в Git была добавлена команда git restore.

2.Откатить коммит - git reset --hard <commit hash> - иногда нужно откатить то что уже было закоммичено, то есть вернуть состояние 
  репозитория к более раннему. Для этого используют команду git reset --hard <commit hash> (reset англ. - сброс, 
  обнуление и hard - суровый).
  git log --oneline # можно найти хеш в истории
  например 7b972f5 (HEAD -> master) style: добавить комментарии, расставить отступы # голова коммита HEAD
  # остальные в листе коммиты
  b576d89 feat: добавить массив Expenses и цикл для добавления трат # вот сюда и вернёмся
  4b58962 refactor: разделить analyzeExpenses() на countSum() и saveExpenses()

  выполняем git reset --hard b576d89 

  теперь HEAD is now at b576d89 feat: добавить массив Expenses и цикл для добавления трат 

3. Откатить изменения, которые не попали ни в standing, ни в коммит - git restore <file> 
   изменения в файле откатяться до последней версии которая была сохранена через git commit или git add

  ИТОГ; Команда git restore --staged <file> переведёт файл из staged обратно в modified или untracked.
        Команда git reset --hard <commit hash> «откатит» историю до коммита с хешем <hash>. Более поздние коммиты потеряются!
        Команда git restore <file> «откатит» изменения в файле до последней сохранённой (в коммите или в staging) версии.


